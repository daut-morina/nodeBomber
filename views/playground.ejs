<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
    <link rel="stylesheet" href="/stylesheets/bootstrap.min.css" />
    <link rel="stylesheet" href="/stylesheets/style.css" />
</head>
<body>
<canvas id="playerCanvas"></canvas>

<script src="/javascripts/jquery-2.1.0.min.js"></script>
<script src="/javascripts/bootstrap.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="/javascripts/Player.js"></script>
<script src="/javascripts/Obstacle.js"></script>

<script>
    $(document).ready(function() {

        var socket;
        var localPlayer;
        var remotePlayers;

        var obstacles = new Array();

        var playerCanvas = document.getElementById("playerCanvas");
        var playerContext = playerCanvas.getContext("2d");

        playerCanvas.width = 480;
        playerCanvas.height = 320;

        playerContext.fillStyle = "#000000";

        localPlayer = new Player(10, 10);

/*
        for (var i=0; i < obstacles.length; i++)
        {
            obstacles[i] =
        }
        */
        obstacles[0] = new Obstacle(100, 100);
        obstacles[1] = new Obstacle(100, 140);
        obstacles[2] = new Obstacle(300, 100);

        remotePlayers = [];

        socket = io.connect(window.location.hostname);

        var findPlayerById = function(id) {
            for (var i = 0; i < remotePlayers.length; ++i) {
                if (id == remotePlayers[i].getId()) {
                    return remotePlayers[i];
                }
            }

            return false;
        };

        var setEventHandlers = function() {
            //@TODO: Use constants for player width (-10) and speed (+/- 5)
            window.onkeydown = function(e) {
                var key = e.keyCode ? e.keyCode : e.which;
                var allowedToMove = new Boolean(true);

                switch(key) {
                    //left
                    case 37:
                        if (!(0 > localPlayer.getX() - 5)) {
                            // with different x-values, no collision is possible
                            for (var i = 0; i < obstacles.length; ++i) {
                                // compare left edge of player with right edge of obstacle
                                if (localPlayer.getX() == obstacles[i].getX() + 20) {
                                    if ((obstacles[i].getY() < localPlayer.getY() && obstacles[i].getY() + 20 > localPlayer.getY()) |
                                            (obstacles[i].getY() < localPlayer.getY() + 10 && obstacles[i].getY() + 20 > localPlayer.getY() + 10)) {

                                        allowedToMove = false;
                                        break;
                                    }
                                }
                            }
                            if (allowedToMove) {
                                localPlayer.setX(localPlayer.getX() - 5);
                            }
                        }
                        break;
                    //up
                    case 38:
                        if (!(0 > localPlayer.getY() - 5)) {
                            // with different y-values, no collision is possible
                            for (var i = 0; i < obstacles.length; ++i) {
                                // compare upper edge of player with bottom edge of obstacle
                                if (localPlayer.getY() == obstacles[i].getY() + 20) {
                                    if ((obstacles[i].getX() < localPlayer.getX() && obstacles[i].getX() + 20 > localPlayer.getX()) |
                                            (obstacles[i].getX() < localPlayer.getX() + 10 && obstacles[i].getX() + 20 > localPlayer.getX() + 10)) {

                                        allowedToMove = false;
                                        break;
                                    }
                                }
                            }
                            if (allowedToMove) {
                                localPlayer.setY(localPlayer.getY() - 5);
                            }
                        }
                        break;
                    //right
                    case 39:
                        if (!(playerCanvas.width - 10 < localPlayer.getX() + 5)) {
                            // with different x-values, no collision is possible
                            for (var i = 0; i < obstacles.length; ++i) {
                                // compare right edge of player with left edge of obstacle
                                if (localPlayer.getX() + 10 == obstacles[i].getX()) {
                                    if ((obstacles[i].getY() < localPlayer.getY() && obstacles[i].getY() + 20 > localPlayer.getY()) |
                                            (obstacles[i].getY() < localPlayer.getY() + 10 && obstacles[i].getY() + 20 > localPlayer.getY() + 10)) {

                                        allowedToMove = false;
                                        break;
                                    }
                                }
                            }
                            if (allowedToMove) {
                                localPlayer.setX(localPlayer.getX() + 5);
                            }
                        }
                        break;
                    //down
                    case 40:
                        if (!(playerCanvas.height - 10 < localPlayer.getY() + 5)) {
                            // with different y-values, no collision is possible
                            for (var i = 0; i < obstacles.length; ++i) {
                                // compare bottom edge of player with upper edge of obstacle
                                if (localPlayer.getY() + 10 == obstacles[i].getY()) {
                                    if ((obstacles[i].getX() < localPlayer.getX() && obstacles[i].getX() + 20 > localPlayer.getX()) |
                                            (obstacles[i].getX() < localPlayer.getX() + 10 && obstacles[i].getX() + 20 > localPlayer.getX() + 10)) {

                                        allowedToMove = false;
                                        break;
                                    }
                                }
                            }
                            if (allowedToMove) {
                                localPlayer.setY(localPlayer.getY() + 5);
                            }
                        }
                        break;
                }

                socket.emit("update player positions", { x: localPlayer.getX(), y: localPlayer.getY() });
            };

            socket.on("connect", function() {
                socket.emit("new player", { x: localPlayer.getX(), y: localPlayer.getY() });
            });

            socket.on("disconnect", function(data) {
                var removedPlayer = findPlayerById(data.id);

                if (!removedPlayer) {
                    return;
                }

                remotePlayers.splice(remotePlayers.indexOf(removedPlayer), 1);
            });

            socket.on("new player", function(data) {
                var newPlayer = new Player(data.x, data.y);
                newPlayer.setId(data.id);

                remotePlayers.push(newPlayer);
            });

            socket.on("update player positions", function(data) {
                var movedPlayer = findPlayerById(data.id);

                if (!movedPlayer) {
                    return;
                };

                movedPlayer.setX(data.x);
                movedPlayer.setY(data.y);
            });
        };

        setEventHandlers();

        var doesCollide = function(position) {


            /*
            console.log('x' + localPlayer.getX());
            console.log('y' + localPlayer.getY());
            console.log('aggx' + localPlayer.getAggregatedX());
            console.log('aggy' + localPlayer.getAggregatedY());
            */

            return false;
        };

        //@TODO: create own canvas for obstacles (especially not destroyable ones)
        setInterval(function() {
            playerContext.clearRect(0, 0, playerCanvas.width, playerCanvas.height);
            localPlayer.draw(playerContext);

            //SMU
            obstacles[0].draw(playerContext);
            obstacles[1].draw(playerContext);
            obstacles[2].draw(playerContext);

            for (var i = 0; i < remotePlayers.length; ++i) {
                remotePlayers[i].draw(playerContext);
            }
        }, 1000 / 60);

    });
</script>
</body>
</html>